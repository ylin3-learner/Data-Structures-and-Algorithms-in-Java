2024-5-1

BST notes: BST (Binary Search Tree)

Compare whole elements in tree to fasten searching rate
--> All elements in tree are comparable.
--> If the new element, e, smaller than root : node.left
--> greater than root : node.right;
--> Generic template in Java: public BST <E extends Comparable<E>> { };

** - The difference between BST and BSTMap are each nodes has key and value or not.
** - In BSTMap, a function will call getNode() to return current node by index

Time Complexity: O(log^n) - the depth of tree
Space Complexity: 2^n

BST Class Design:
     Wrap-up LinkedList Nodes

     public BST class {

        private class Node {

            E e;
            Node left, right;

            // Default constructor
            public Node(E e) {
                this.e = e;
                left = null;
                right = null;
            }
        }
     }

    // Class Members
    private Node root;
    private int size

    // Default function
    public boolean isEmpty() { return size == 0;}

    public int getSize() { return size;}

    // Add, Remove, Update, Search

    public void add(E e) {}

    /**
    Recursion OR not:

    - Recursion: Add a node in a tree can be viewed as a recursion operation to add nodes.
    public void add(E e) {

        root = add(root, e);
    }

    // Handle the current added node and add behind the root node (node)
    private Node add(Node node, E e) {

        // Handle parameters' validity and the limit case in recursion
        if(node == null) {
            size ++;
            return new Node(e);
        }

        // Judge which sub-nodes to put node(e) in: node.left, node.right
        if (e.compareTo(node.e) < 0)
            node.left = add(node.left, e);
        else if (e.compareTo(node.e) > 0)
            node.right = add(node.right, e);

        // Handle the added node and add to root node
        return node;
    }

    -- Without recursion:
    public void addNR(E e) {

        // Check if root is null
        if (root == null) {
            root = new Node(e);
            size ++;
            return;
        }

        // Find root node to add new node to its back
        Node cur = root;

        // Check if it's already added.
        while(cur.next != null) {

            // Check adding whether in left tree or right tree nodes
            if(e.compareTo(cur.e) < 0) {

                // check if the left sub-nodes is null (if not, find next left sub-nodes)
                if(cur.left == null) {
                    cur.left = new Node(e);
                    size ++;
                    return; // for search's efficiency
                }

                cur = cur.left;
            } else if(e.compareTo(cur.e) > 0) {

                if (cur.right == null) {
                    cur.right = new Node(e);
                    size ++;
                    return;
                }

                cur = cur.right;
            } else {
                return;
            }
        }
    }
    */

    public void remove(E e) {}

    /**
    Recursion OR not:

    -- Recursion: Delete nodes and add removed sub-nodes to the initial root node
    // Find the matched e and delete from BST

    public void remove(E e) {
        root = remove(root, e);
    }

    private Node remove(Node node, E e) {

        if(node == null)
            return null;

        // Check if finding the matched e
        if(e.compareTo(node.e) < 0) {
            node.left = remove(node.left, e);
            return node;
        } else if (e.compareTo(node.e) > 0) {
            node.right = remove(node.right, e);
            return node;
        } else { // e == node.e -> find matched e

            // check if node itself has only one branch
            if (node.left == null) {

                // reassign node's value
                Node rightNode = node.right;
                node.right = null;
                size --;
                return rightNode;
            } else if (node.right == null) {
                Node leftNode = node.left;
                node.left = null;
                size --;
                return leftNode;
            } else {
                // Hibbard Deletion - raised in 1930, choose minimum(node.left) to replace node

                Node predecessor = maximum(node.left);
                predecessor.left = removeMax(node.left);
                predecessor.right = node.right;
                node.right = node.left = null;
                return predecessor;

                /**
                Node successor = minimum(node.right);
                successor.right = removeMin(node.right);
                successor.left = node.left;
                node.right = node.left = null;
                return successor;
                */
            }
        }
    }

    -- Without Recursion:

    public void removeNR() {

    }

    */


    // contains


    // preOrder(), inOrder(), postOrder()

    /** Recursion */
    public void preOrder() {
        preOrder(root);
    }

    private void preOrder(Node node) {

        if (node == null)
            return;

        System.out.println(node.e);

        preOrder(node.left);
        preOrder(node.right);
    }

    public void inOrder() {
        inOrder(root);
    }

    private void inOrder(Node node) {

        if (node == null)
            return;

        inOrder(node.left);
        System.out.println(node.e);
        inOrder(node.right);
    }

    // Suitable for deleting or freeing nodes in a tree,
    // as it ensures that child nodes are processed before their parents.
    public void postOrder() {
        postOrder(root);
    }

    private void postOrder(Node node) {

        if (node == null)
            return;

        postOrder(node.left);
        postOrder(node.right);
        System.out.println(node.e);
    }

    /** Without Recursion: use Stack */
    // root-left-right
    public void preOrderNR() {

        // Use stack to mimic system's stack to restore current node
        Stack <Node> stack = new Stack();
        stack.push(root);

        while(!stack.isEmpty()) {

            Node cur = stack.pop();

            System.out.println(cur.e);

            if (cur.right != null)
                stack.push(cur.right);
            else if (cur.left != null)
                stack.push(cur.left);
        }
    }

    // Method to traverse the binary tree in preOrder using a Queue (incorrect)
        void preOrderWithQueue(Node node) {
            if (node == null)
                return;

            Queue<Node> queue = new LinkedList<>();
            queue.add(node);

            while (!queue.isEmpty()) {
                Node current = queue.poll();
                System.out.print(current.data + " ");

                if (current.left != null)
                    queue.add(current.left);

                if (current.right != null)
                    queue.add(current.right);
            }
        }


    // Left-Root-Right order
    public void inOrder() {

        Stack<Node> stack = new Stack();

        Node cur = root;

        while(cur != null || !stack.isEmpty()) {

            // Keep pushing node.left into stack
            while(cur != null) {
                stack.push(cur);
                cur = cur.left;
            }

            // till the end, print out the last leaf of cur.left;
            cur = stack.pop();
            System.out.println(cur.e);
            stack.push(cur.right);
        }
    }

    // levelOrder()

    // maximum, minimum
    public E minimum() {
        if (size == 0)
            throw new RuntimeException("BST is null.");

        return minimum(root).e;
    }

    private Node minimum(Node node) {

        if (node.left == null)
            return null;

        return minimum(node.left);
    }

    public E maximum() {
        if (size == 0)
            throw new RuntimeException("BST is null.");
        return maximum(root);
    }

    privateã€€Node maximum(Node node) {

        if (node.right == null)
            return node;

        return maximum(node.right);
    }

    // removeMin() , removeMax()
    public E removeMin() {
        E ret = minimum();
        root = removeMin(root);
        return ret;
    }

    private Node removeMin(Node node) {

        if (node.left == null) {
            Node rightNode = node.right;
            node.right = null;
            size --;
            return rightNode;
        }

        node.left = removeMin(node.left);
        return node;
    }

    public E removeMax() {

        if (size == 0)
            throw new RuntimeException("Remove failed! BST is null.");

        E ret = maximum();
        root = removeMax(root);
        return ret;
    }

    private Node removeMax(Node node) {

        if (node.right == null) {

            Node leftNode = node.left;
            node.left = null;
            size --;
            return leftNode;
        }

        node.right = removeMax(node.right);

        return node;
    }