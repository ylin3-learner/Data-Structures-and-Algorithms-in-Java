/**
 * The rand7() API is already defined in the parent class SolBase.
 * public int rand7();
 * @return a random integer in the range 1 to 7 (only one-time) P.S: compared to multiple sampling
 */
class Solution extends SolBase {
    public int rand10() {

        while (true) {
            // Starting from 0 ensures that all combinations of a and b are equally likely, which is necessary to maintain a uniform distribution
            int a = rand7() - 1, b = rand7() - 1;

            // Combine multiple results of rand7() to generate numbers that can cover the range from 1 to 10.
            // If we map these outcomes correctly, we can generate numbers between 1 and 10.
            // treating a as the "tens" digit and b as the "ones" digit in a base-7 system.
            int t = a * 7 + b;

            // 為何取值 [0...39]? 如果我取值[0, 29] 接受? [0, 19] 接受?, [1, 10] 接受? 哪種取值範圍更好?
            if (t >= 40) continue;
            return t % 10 + 1;
        }
    }
}

// [0...39] 最好? choosing the largest possible range that fits your needs will generally result in the lowest expected value
/**
 * Range [0, 29]:
 * Total possible outcomes: 30
 * Generated by:
 * rand7() gives you 49 possible outcomes (since 7×7=49).
 * So, you accept the result if it's between 0 and 29.
 *
 * Expected number of attempts:
 * The probability of rolling a number in [0, 29] is 30/49
 * The expected number of attempts is 1 / Probability of acceptance
 *
 * Expected value:
 * 𝐸_{1}= 49/30 ≈ 1.633
 *
 * IF you compare with [0, 19], [1, 10], expected value will be: 49/20, 49/10
 *
 * Conclusion: choosing the largest possible range result in the lowest expected value
 */